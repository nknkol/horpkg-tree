name: Build and Release Tree HNP

on:
  # 1. 手动触发 (workflow_dispatch)
  workflow_dispatch:
    inputs:
      build_type:
        description: '选择构建类型'
        required: true
        default: 'development'
        type: choice
        options:
          - development # 开发版：仅编译并上传构建产物
          - release     # 发布版：编译、上传并创建预发布版本 (Pre-release)

  # 2. 推送标签时自动触发 (用于正式发布)
  push:
    tags:
      - 'v*'

jobs:
  build-hnp:
    name: Build for ${{ matrix.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [arm64-v8a, x86_64]

    env:
      OHOS_SDK_RELEASE_VERSION: "5.1.0"
      OHOS_SDK_HOME: ${{ github.workspace }}/ohos-sdk/linux

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y wget zip curl build-essential

      - name: Download OHOS SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: ${{ env.OHOS_SDK_HOME }}
          key: ${{ runner.os }}-ohos-sdk-${{ env.OHOS_SDK_RELEASE_VERSION }}
      
      - name: Extract SDK if not cached
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "📥 Downloading public OHOS SDK with cross-compilers..."
          curl -OL https://repo.huaweicloud.com/openharmony/os/${OHOS_SDK_RELEASE_VERSION}-Release/ohos-sdk-windows_linux-public.tar.gz
          mkdir -p ${{ env.OHOS_SDK_HOME }}
          tar -xzf ohos-sdk-windows_linux-public.tar.gz
          rm ohos-sdk-windows_linux-public.tar.gz
          pushd ohos-sdk/linux
            for file in $(find . -type f); do
              unzip -q $file && rm $file
            done
          popd
          # 将解压后的内容移动到正确的缓存路径
          mv ohos-sdk/linux/* ${{ env.OHOS_SDK_HOME }}/

      - name: Build Package for ${{ matrix.arch }}
        run: |
          chmod +x build.sh
          ./build.sh ${{ matrix.arch }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tree-${{ matrix.arch }}
          path: |
            tree-*.hnp
            tree-*.hnp.sha256

  # --- 发布任务 ---
  release:
    name: Create GitHub Release
    # 仅在两种情况下运行：
    # 1. 推送了 'v*' 开头的标签
    # 2. 手动选择了 'release' 构建类型
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.build_type == 'release'
    needs: build-hnp
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set Release Properties
        id: set_release_props
        run: |
          # 如果是标签触发，使用标签名作为版本号
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            RELEASE_NAME="${{ github.ref_name }}"
            TAG_NAME="${{ github.ref_name }}"
            PRERELEASE=false
          # 如果是手动触发的 release，创建一个带日期的预发布版本
          else
            RELEASE_NAME="Nightly-$(date +%Y%m%d)"
            TAG_NAME="nightly-$(date +%Y%m%d-%H%M%S)"
            PRERELEASE=true
          fi
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "PRERELEASE=${PRERELEASE}" >> $GITHUB_OUTPUT

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          # 使用上一步生成的属性
          name: ${{ steps.set_release_props.outputs.RELEASE_NAME }}
          tag_name: ${{ steps.set_release_props.outputs.TAG_NAME }}
          prerelease: ${{ steps.set_release_props.outputs.PRERELEASE }}
          files: |
            artifacts/tree-arm64-v8a/tree-*.hnp
            artifacts/tree-arm64-v8a/tree-*.hnp.sha256
            artifacts/tree-x86_64/tree-*.hnp
            artifacts/tree-x86_64/tree-*.hnp.sha256